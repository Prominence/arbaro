plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'org.liquibase.gradle' version '2.0.2'
	id 'nu.studer.jooq' version '4.1'
	id 'java'
}

group = 'com.github.prominence'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '13'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	//implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	//implementation 'org.springframework.boot:spring-boot-starter-mail'
	//implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.session:spring-session-core'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'io.r2dbc:r2dbc-postgresql'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.boot.experimental:spring-boot-test-autoconfigure-r2dbc'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
	testImplementation 'org.springframework.security:spring-security-test'

	jooqRuntime 'org.postgresql:postgresql:42.2.11'
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.boot.experimental:spring-boot-bom-r2dbc:0.1.0.M3'
	}
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

//gradle generateMainJooqSchemaSource
jooq {
	version = '3.12.3'
	edition = 'OSS'
	generateSchemaSourceOnCompilation = true
	main(sourceSets.main) {
		jdbc {
			driver = 'org.postgresql.Driver'
			url = 'jdbc:postgresql://localhost:5432/arbaro'
			user = 'arbaro'
			password = 'arbaro'
		}
		generator {
			name = 'org.jooq.codegen.DefaultGenerator'
			strategy {
				name = 'org.jooq.codegen.DefaultGeneratorStrategy'
			}
			database {
				name = 'org.jooq.meta.postgres.PostgresDatabase'
				inputSchema = 'public'
				/*forcedTypes {
					forcedType {
						name = 'varchar'
						expression = '.*'
						types = 'JSONB?'
					}
					forcedType {
						name = 'varchar'
						expression = '.*'
						types = 'INET'
					}
				}*/
			}
			generate {
				relations = true
				deprecated = false
				records = true
				immutablePojos = true
				fluentSetters = true
				// ...
			}
			target {
				packageName = 'com.github.prominence.arbaro.db'
				directory = 'src/main/java'
			}
		}
	}
}

